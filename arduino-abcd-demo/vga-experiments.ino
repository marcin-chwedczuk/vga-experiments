// Font from: https://github.com/skiselev/8088_bios

const uint8_t font[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x7E, 0x81, 0xA5, 0x81, 0xBD, 0x99, 0x81, 0x7E,
  0x7E, 0xFF, 0xDB, 0xFF, 0xC3, 0xE7, 0xFF, 0x7E,
  0x6C, 0xFE, 0xFE, 0xFE, 0x7C, 0x38, 0x10, 0x00,
  0x10, 0x38, 0x7C, 0xFE, 0x7C, 0x38, 0x10, 0x00,
  0x38, 0x7C, 0x38, 0xFE, 0xFE, 0x7C, 0x38, 0x7C,
  0x10, 0x10, 0x38, 0x7C, 0xFE, 0x7C, 0x38, 0x7C,
  0x00, 0x00, 0x18, 0x3C, 0x3C, 0x18, 0x00, 0x00,
  0xFF, 0xFF, 0xE7, 0xC3, 0xC3, 0xE7, 0xFF, 0xFF,
  0x00, 0x3C, 0x66, 0x42, 0x42, 0x66, 0x3C, 0x00,
  0xFF, 0xC3, 0x99, 0xBD, 0xBD, 0x99, 0xC3, 0xFF,
  0x0F, 0x07, 0x0F, 0x7D, 0xCC, 0xCC, 0xCC, 0x78,
  0x3C, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x7E, 0x18,
  0x3F, 0x33, 0x3F, 0x30, 0x30, 0x70, 0xF0, 0xE0,
  0x7F, 0x63, 0x7F, 0x63, 0x63, 0x67, 0xE6, 0xC0,
  0x99, 0x5A, 0x3C, 0xE7, 0xE7, 0x3C, 0x5A, 0x99,
  0x80, 0xE0, 0xF8, 0xFE, 0xF8, 0xE0, 0x80, 0x00,
  0x02, 0x0E, 0x3E, 0xFE, 0x3E, 0x0E, 0x02, 0x00,
  0x18, 0x3C, 0x7E, 0x18, 0x18, 0x7E, 0x3C, 0x18,
  0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x00,
  0x7F, 0xDB, 0xDB, 0x7B, 0x1B, 0x1B, 0x1B, 0x00,
  0x3E, 0x63, 0x38, 0x6C, 0x6C, 0x38, 0xCC, 0x78,
  0x00, 0x00, 0x00, 0x00, 0x7E, 0x7E, 0x7E, 0x00,
  0x18, 0x3C, 0x7E, 0x18, 0x7E, 0x3C, 0x18, 0xFF,
  0x18, 0x3C, 0x7E, 0x18, 0x18, 0x18, 0x18, 0x00,
  0x18, 0x18, 0x18, 0x18, 0x7E, 0x3C, 0x18, 0x00,
  0x00, 0x18, 0x0C, 0xFE, 0x0C, 0x18, 0x00, 0x00,
  0x00, 0x30, 0x60, 0xFE, 0x60, 0x30, 0x00, 0x00,
  0x00, 0x00, 0xC0, 0xC0, 0xC0, 0xFE, 0x00, 0x00,
  0x00, 0x24, 0x66, 0xFF, 0x66, 0x24, 0x00, 0x00,
  0x00, 0x18, 0x3C, 0x7E, 0xFF, 0xFF, 0x00, 0x00,
  0x00, 0xFF, 0xFF, 0x7E, 0x3C, 0x18, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x30, 0x78, 0x78, 0x30, 0x30, 0x00, 0x30, 0x00,
  0x6C, 0x6C, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x6C, 0x6C, 0xFE, 0x6C, 0xFE, 0x6C, 0x6C, 0x00,
  0x30, 0x7C, 0xC0, 0x78, 0x0C, 0xF8, 0x30, 0x00,
  0x00, 0xC6, 0xCC, 0x18, 0x30, 0x66, 0xC6, 0x00,
  0x38, 0x6C, 0x38, 0x76, 0xDC, 0xCC, 0x76, 0x00,
  0x60, 0x60, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x18, 0x30, 0x60, 0x60, 0x60, 0x30, 0x18, 0x00,
  0x60, 0x30, 0x18, 0x18, 0x18, 0x30, 0x60, 0x00,
  0x00, 0x66, 0x3C, 0xFF, 0x3C, 0x66, 0x00, 0x00,
  0x00, 0x30, 0x30, 0xFC, 0x30, 0x30, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x60,
  0x00, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00,
  0x06, 0x0C, 0x18, 0x30, 0x60, 0xC0, 0x80, 0x00,
  0x7C, 0xC6, 0xCE, 0xDE, 0xF6, 0xE6, 0x7C, 0x00,
  0x30, 0x70, 0x30, 0x30, 0x30, 0x30, 0xFC, 0x00,
  0x78, 0xCC, 0x0C, 0x38, 0x60, 0xCC, 0xFC, 0x00,
  0x78, 0xCC, 0x0C, 0x38, 0x0C, 0xCC, 0x78, 0x00,
  0x1C, 0x3C, 0x6C, 0xCC, 0xFE, 0x0C, 0x1E, 0x00,
  0xFC, 0xC0, 0xF8, 0x0C, 0x0C, 0xCC, 0x78, 0x00,
  0x38, 0x60, 0xC0, 0xF8, 0xCC, 0xCC, 0x78, 0x00,
  0xFC, 0xCC, 0x0C, 0x18, 0x30, 0x30, 0x30, 0x00,
  0x78, 0xCC, 0xCC, 0x78, 0xCC, 0xCC, 0x78, 0x00,
  0x78, 0xCC, 0xCC, 0x7C, 0x0C, 0x18, 0x70, 0x00,
  0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x00,
  0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x60,
  0x18, 0x30, 0x60, 0xC0, 0x60, 0x30, 0x18, 0x00,
  0x00, 0x00, 0xFC, 0x00, 0x00, 0xFC, 0x00, 0x00,
  0x60, 0x30, 0x18, 0x0C, 0x18, 0x30, 0x60, 0x00,
  0x78, 0xCC, 0x0C, 0x18, 0x30, 0x00, 0x30, 0x00,
  0x7C, 0xC6, 0xDE, 0xDE, 0xDE, 0xC0, 0x78, 0x00,
  0x30, 0x78, 0xCC, 0xCC, 0xFC, 0xCC, 0xCC, 0x00,
  0xFC, 0x66, 0x66, 0x7C, 0x66, 0x66, 0xFC, 0x00,
  0x3C, 0x66, 0xC0, 0xC0, 0xC0, 0x66, 0x3C, 0x00,
  0xF8, 0x6C, 0x66, 0x66, 0x66, 0x6C, 0xF8, 0x00,
  0xFE, 0x62, 0x68, 0x78, 0x68, 0x62, 0xFE, 0x00,
  0xFE, 0x62, 0x68, 0x78, 0x68, 0x60, 0xF0, 0x00,
  0x3C, 0x66, 0xC0, 0xC0, 0xCE, 0x66, 0x3E, 0x00,
  0xCC, 0xCC, 0xCC, 0xFC, 0xCC, 0xCC, 0xCC, 0x00,
  0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
  0x1E, 0x0C, 0x0C, 0x0C, 0xCC, 0xCC, 0x78, 0x00,
  0xE6, 0x66, 0x6C, 0x78, 0x6C, 0x66, 0xE6, 0x00,
  0xF0, 0x60, 0x60, 0x60, 0x62, 0x66, 0xFE, 0x00,
  0xC6, 0xEE, 0xFE, 0xFE, 0xD6, 0xC6, 0xC6, 0x00,
  0xC6, 0xE6, 0xF6, 0xDE, 0xCE, 0xC6, 0xC6, 0x00,
  0x38, 0x6C, 0xC6, 0xC6, 0xC6, 0x6C, 0x38, 0x00,
  0xFC, 0x66, 0x66, 0x7C, 0x60, 0x60, 0xF0, 0x00,
  0x78, 0xCC, 0xCC, 0xCC, 0xDC, 0x78, 0x1C, 0x00,
  0xFC, 0x66, 0x66, 0x7C, 0x6C, 0x66, 0xE6, 0x00,
  0x78, 0xCC, 0xE0, 0x70, 0x1C, 0xCC, 0x78, 0x00,
  0xFC, 0xB4, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
  0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xFC, 0x00,
  0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x78, 0x30, 0x00,
  0xC6, 0xC6, 0xC6, 0xD6, 0xFE, 0xEE, 0xC6, 0x00,
  0xC6, 0x44, 0x6C, 0x38, 0x38, 0x6C, 0xC6, 0x00,
  0xCC, 0xCC, 0xCC, 0x78, 0x30, 0x30, 0x78, 0x00,
  0xFE, 0xC6, 0x8C, 0x18, 0x32, 0x66, 0xFE, 0x00,
  0x78, 0x60, 0x60, 0x60, 0x60, 0x60, 0x78, 0x00,
  0xC0, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x02, 0x00,
  0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x78, 0x00,
  0x10, 0x38, 0x6C, 0xC6, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,
  0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0x7C, 0x00,
  0x60, 0x60, 0x60, 0x7C, 0x66, 0x66, 0x7C, 0x00,
  0x00, 0x00, 0x78, 0xCC, 0xC0, 0xCC, 0x78, 0x00,
  0x0C, 0x0C, 0x0C, 0x7C, 0xCC, 0xCC, 0x7C, 0x00,
  0x00, 0x00, 0x78, 0xCC, 0xFC, 0xC0, 0x78, 0x00,
  0x38, 0x6C, 0x60, 0xF0, 0x60, 0x60, 0xF0, 0x00,
  0x00, 0x00, 0x7C, 0xCC, 0xCC, 0x7C, 0x0C, 0xF8,
  0x60, 0x60, 0x7C, 0x66, 0x66, 0x66, 0x66, 0x00,
  0x30, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
  0x0C, 0x00, 0x0C, 0x0C, 0x0C, 0x0C, 0x6C, 0x38,
  0x60, 0x60, 0x66, 0x6C, 0x78, 0x6C, 0x66, 0x00,
  0x70, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
  0x00, 0x00, 0xCC, 0xFE, 0xFE, 0xD6, 0xC6, 0x00,
  0x00, 0x00, 0xF8, 0xCC, 0xCC, 0xCC, 0xCC, 0x00,
  0x00, 0x00, 0x78, 0xCC, 0xCC, 0xCC, 0x78, 0x00,
  0x00, 0x00, 0x7C, 0x66, 0x66, 0x7C, 0x60, 0x60,
  0x00, 0x00, 0x7C, 0xCC, 0xCC, 0x7C, 0x0C, 0x0C,
  0x00, 0x00, 0xDC, 0x76, 0x66, 0x60, 0xF0, 0x00,
  0x00, 0x00, 0x7C, 0xC0, 0x78, 0x0C, 0xF8, 0x00,
  0x10, 0x30, 0x7C, 0x30, 0x30, 0x34, 0x18, 0x00,
  0x00, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0x7C, 0x00,
  0x00, 0x00, 0xCC, 0xCC, 0xCC, 0x78, 0x30, 0x00,
  0x00, 0x00, 0xC6, 0xD6, 0xFE, 0xFE, 0x6C, 0x00,
  0x00, 0x00, 0xC6, 0x6C, 0x38, 0x6C, 0xC6, 0x00,
  0x00, 0x00, 0xCC, 0xCC, 0xCC, 0x7C, 0x0C, 0xF8,
  0x00, 0x00, 0xFC, 0x98, 0x30, 0x64, 0xFC, 0x00,
  0x1C, 0x30, 0x30, 0xE0, 0x30, 0x30, 0x1C, 0x00,
  0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00,
  0xE0, 0x30, 0x30, 0x1C, 0x30, 0x30, 0xE0, 0x00,
  0x76, 0xDC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x10, 0x38, 0x6C, 0xC6, 0xC6, 0xFE, 0x00
};

#define PIN_VGA_MODE_SELECTOR 12
#define VGA_MODE_READ LOW
#define VGA_MODE_WRITE HIGH

#define PIN_MEM_WRITE 11

#define PIN_SHIFT_REG_LATCH 7
#define PIN_SHIFT_REG_DATA 8
#define PIN_SHIFT_REG_CLK 9

void setColumnAddr(uint8_t addr) {
  // Column address A0 - A4
  int apins[] = { A0, A1, A2, A3, A4 };
  for (int i = 0; i < sizeof(apins) / sizeof(apins[0]); i++) {
    digitalWrite(apins[i], (addr & 1) ? HIGH : LOW);
    addr >>= 1;
  }
}

void setRowAddrAndData(uint8_t rowAddr, uint8_t data) {
  digitalWrite(PIN_SHIFT_REG_LATCH, LOW);

  shiftOut(PIN_SHIFT_REG_DATA, PIN_SHIFT_REG_CLK, MSBFIRST, rowAddr);
  shiftOut(PIN_SHIFT_REG_DATA, PIN_SHIFT_REG_CLK, MSBFIRST, data);

  digitalWrite(PIN_SHIFT_REG_LATCH, HIGH);
}

void setup() {
  pinMode(PIN_MEM_WRITE, OUTPUT);  
  digitalWrite(PIN_MEM_WRITE, HIGH);

  pinMode(PIN_VGA_MODE_SELECTOR, OUTPUT);
  digitalWrite(PIN_VGA_MODE_SELECTOR, VGA_MODE_READ);

  pinMode(PIN_SHIFT_REG_LATCH, OUTPUT);
  pinMode(PIN_SHIFT_REG_DATA, OUTPUT);
  pinMode(PIN_SHIFT_REG_CLK, OUTPUT);

  // Column address A0 - A4
  int apins[] = { A0, A1, A2, A3, A4 };
  for (int i = 0; i < sizeof(apins) / sizeof(apins[0]); i++) {
    pinMode(apins[i], OUTPUT);
    digitalWrite(apins[i], LOW);
  }
}

void write(int row, int col, uint8_t data) {
  setColumnAddr(col);
  setRowAddrAndData((uint8_t)row, data);

  digitalWrite(PIN_VGA_MODE_SELECTOR, VGA_MODE_WRITE);
  delay(0);
  // Generate write pulse

  digitalWrite(PIN_MEM_WRITE, LOW);
  delay(0);
  digitalWrite(PIN_MEM_WRITE, HIGH);

  delay(0);
  digitalWrite(PIN_VGA_MODE_SELECTOR, VGA_MODE_READ);
}

void printCharAt(int row, int col, char c) {
  for (int i = 0; i < 8; i++) {
    uint8_t data = font[c*8 + i];
    write(row + i, col, data);
  }
}

void printStringAt(int row, int col, const char* str) {
  while(*str) {
    printCharAt(row, col, *str);
    str++;
    col++;
  }
}

void clearScreen(uint8_t data) {
  for (int col = 0; col < 25; col++) {
    for (int r = 0; r < 150; r++) {
      write(r, col, data);
    }
  }
}

void clearScreenChar(char data) {
  for (int col = 0; col < 25; col++) {
    for (int r = 0; r < 150; r+=8) {
      printCharAt(r, col, data);
    }
  }
}

int c = 'A';
void loop() {
  clearScreenChar(c++);
  delay(1000);
  if (c > 'Z') { c = 'A'; }
}
